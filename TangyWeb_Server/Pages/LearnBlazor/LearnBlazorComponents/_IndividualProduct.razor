
<div class="bg-light border m-1 col-5" @onclick="(args) => LastSelectedProductUpdated(args, product.Name)">
    <h4 class="text-secondary">Product - @product.Id</h4>
    <input type="checkbox" @onchange="FavoriteUpdated"/> Add to Favorite<br />
    Name - @product.Name <br/>
    <p>RF from Parent - @FirstFragment @SecondFragment</p>
    Show Properties:
    <input type="checkbox" @bind-value="product.IsActive" checked="@(product.IsActive ? "checked" : null)"/>

    @if (product.IsActive)
    {
        @foreach (var prodProp in product.ProductProperties)
        {
            <p>@prodProp.Key - @prodProp.Value</p>
        }
    }
    <br/>
    <_EditDeleteButton IsActive="@product.IsActive">
    </_EditDeleteButton>
</div>

@code {
    [Parameter]
    public Demo_Product product { get; set; }

    [Parameter]
    public EventCallback<bool> OnFavoriteCountUpdated { get; set; }

    [Parameter]
    public EventCallback<string> OnLastSelectedProductChange { get; set; }


    [Parameter]
    public RenderFragment FirstFragment { get; set; }

    [Parameter]
    public RenderFragment SecondFragment { get; set; }

    public async Task FavoriteUpdated(ChangeEventArgs e)
    {
        await OnFavoriteCountUpdated.InvokeAsync((bool) e.Value);
    }

    public async Task LastSelectedProductUpdated(MouseEventArgs e, string name)
    {
        await OnLastSelectedProductChange.InvokeAsync(name);
    }
}
